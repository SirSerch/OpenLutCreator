import sys
import assets.assets
from PIL import Image
from PyQt5.QtWidgets import QApplication, QDialog, QMainWindow, QFileDialog
from PyQt5 import uic

class App(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        uic.loadUi("assets/ui/appUI.ui", self)

        self.generateHald.clicked.connect(self.generate)
        self.convertCube.clicked.connect(self.convert)

    def generate(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        options |= QFileDialog.ShowDirsOnly
        file = QFileDialog.getExistingDirectory(
            self, "Select a directory to save Hald...", "", options=options
        )
        if file:
            self.createHald(file)

    def convert(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file = QFileDialog.getOpenFileName(
            self,"Select edited Hald...","","Images (*.png *.jpg)",options=options)
        if file[0] != "":
            self.generateCube(file[0])

    def checkRadius(self):
        if self.highRadius.isChecked():
            return 144
        elif self.mediumRadius.isChecked():
            return 64
        else:
            return 25

    def setProgressBar(self, value, text):
        if text != "":
            self.progressBar.setFormat(text)
        self.progressBar.setProperty("value", value)

    def createHald(self, output):
        self.setProgressBar(0, "Generating Hald...%p%")
        lutSize = self.checkRadius()
        haldSize = round((lutSize ** 3) ** 0.5)
        hald = Image.new("RGB", (haldSize, haldSize), (0, 0, 0))
        pixel = hald.load()
        r = g = b = 0
        for y in range(hald.height):
            for x in range(hald.width):
                def value(color):
                    return round((255 / (lutSize - 1)) * color)

                if r >= lutSize:
                    r = 0
                    g += 1
                if g >= lutSize:
                    g = 0
                    b += 1
                pixel[x, y] = (value(r), value(g), value(b))
                progress = round((y * 100) / hald.height)
                self.setProgressBar(progress, "")
                r += 1
        hald.save(output + "/Neutral_" + str(lutSize) + ".png")
        self.setProgressBar(0, "Process Complete")

    def generateCube(self, file):
        self.setProgressBar(0, "Generating LUT...%p%")

        image = Image.open(file)
        hald = image.load()
        lutSize = round((image.width ** 2) ** (1 / 3))

        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        options |= QFileDialog.ShowDirsOnly
        file = QFileDialog.getExistingDirectory(self, "Select a directory to save the LUT", "", options=options)
        if file:
            cube = open(file + "/Export_" + str(lutSize) + ".cube", "w")
            cube.write("#Generated by OpenLUTCreator\nTITLE Export \n\n")
            cube.write("#LUT Size "+str(lutSize)+"\n")
            cube.write("%s %d\n\n" % ("LUT_3D_SIZE", lutSize))

            for y in range(image.height):
                for x in range(image.width):
                    r = round((hald[x, y][0] / 255), 6)
                    g = round((hald[x, y][1] / 255), 6)
                    b = round((hald[x, y][2] / 255), 6)
                    cube.write("%08f %08f %08f\n" % (r, g, b))
                    progress = round((y * 100) / image.height)
                    self.setProgressBar(progress, "")
            cube.close()
            self.setProgressBar(0, "Process Complete")
        else:
            ui.progressBar.setEnabled(True)
            ui.progressBar.setFormat("ERROR: You don't select a directory to save file")


app = QApplication(sys.argv)
mainFrame = App()
mainFrame.show()
sys.exit(app.exec_())
