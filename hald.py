from PIL import Image
import sys, os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QMainWindow, QTextEdit, QAction, QFileDialog, QApplication)
from mainApp import Ui_MainWindow

class Main(QMainWindow):
    def __init__(self):
        def __init__(self):
            super().__init__()
            self.setupUi()

    def setupUi(self, MainWindow):
        self.window = MainWindow
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(640, 400)
        #code-skipped

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    class Hald:
        def __init__(self, lutSize):
            self.lutSize = lutSize
            self.haldSize = round((lutSize**3)**0.5)
        
        def createHald(self, output):
            ui.progressBar.setEnabled(True)
            ui.progressBar.setProperty("value", 0)
            ui.progressBar.setFormat("Creating Hald...%p%")
            hald = Image.new('RGB', (self.haldSize,self.haldSize), (0,0,0))
            pixel = hald.load()
            r = g = b = 0
            for y in range(hald.height):
                for x in range(hald.width):
                    def value(color):
                        return round((255/(self.lutSize - 1))*color)
                    if r >= self.lutSize : 
                        r = 0
                        g += 1
                    if g >= self.lutSize:
                        g = 0
                        b += 1
                    pixel[x,y] = (value(r), value(g), value(b))
                    progress = round((y * 100) / hald.height)
                    ui.progressBar.setProperty("value", progress)
                    r += 1
            hald.save(output+"/Neutral.png")
            ui.progressBar.setProperty("value", 0)
            ui.progressBar.setEnabled(true)
            ui.progressBar.setFormat("Creating Hald...Complete")

        def generateCube(self, file):
            ui.progressBar.setEnabled(True)
            ui.progressBar.setProperty("value", 0)
            ui.progressBar.setFormat("Converting to .cube...%p%")
            image = Image.open(file)
            hald = image.load()

            lutSize = round((image.width**2)**(1/3))
            
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            options |= QFileDialog.ShowDirsOnly
            print(options)
            file = QFileDialog.getExistingDirectory(MainWindow,"Select a directory to save .cube...", "" ,options=options)
            if file:
                cube = open(file + "/Export_" + str(lutSize) + ".cube", "w")
                cube.write('#Generated by OpenLUTCreator\nTITLE Export \n\n')
                cube.write("#LUT Size\n")
                cube.write("%s %d\n\n"%("LUT_3D_SIZE", lutSize))

                for y in range(image.height):
                    for x in range(image.width):
                        r = round((hald[x,y][0]/255), 6)
                        g = round((hald[x,y][1]/255), 6)
                        b = round((hald[x,y][2]/255), 6)
                        cube.write('%08f %08f %08f\n' %(r, g, b))
                        progress = round((y * 100) / image.height)
                        ui.progressBar.setProperty("value", progress)
                cube.close()
                ui.progressBar.setProperty("value", 0)
                ui.progressBar.setEnabled(False)
                ui.progressBar.setFormat("Converting to .cube...Complete")
            else:
                ui.progressBar.setEnabled(True)
                ui.progressBar.setFormat("ERROR: You don't select a directory to save file")

 

    hald = Hald(49)

    def create():
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        options |= QFileDialog.ShowDirsOnly
        print(options)
        file = QFileDialog.getExistingDirectory(MainWindow,"Select a directory to save Hald...", "" ,options=options)
        if file:
            print(file)
            hald.createHald(file)

    def generate():
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file = QFileDialog.getOpenFileName(MainWindow,"Select edited Hald...", "", "Images (*.png *.jpg)", options=options)
        if file[0] != "":
            print("Hola" + file[0])
            hald.generateCube(file[0])


    ui.haldGenerator.clicked.connect(create)
    ui.convertCube.clicked.connect(generate)

    sys.exit(app.exec_())

